// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yonetimsell.Data.Concrete.Contexts;

#nullable disable

namespace Yonetimsell.Data.Migrations
{
    [DbContext(typeof(YonetimsellDbContext))]
    [Migration("20240327094432_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "77888ce9-b7b7-4bde-9805-ad518312aa58",
                            RoleId = "d5eda92f-fc42-49f4-9369-0406fd9c9097"
                        },
                        new
                        {
                            UserId = "8ba0b330-0364-49b5-b7aa-db4362b18aef",
                            RoleId = "d5eda92f-fc42-49f4-9369-0406fd9c9097"
                        },
                        new
                        {
                            UserId = "4e853078-b84d-4f07-86e2-651795b4a0c5",
                            RoleId = "d6fc7bbc-d2ea-4523-b82a-3f0130e23191"
                        },
                        new
                        {
                            UserId = "c1bf39d2-2ecf-46d2-933d-e8d874021e95",
                            RoleId = "d6fc7bbc-d2ea-4523-b82a-3f0130e23191"
                        },
                        new
                        {
                            UserId = "855d8185-6a9b-4114-a07a-c8d0932e7b94",
                            RoleId = "2dd6fd41-9cf0-4db8-9e2e-ea5359276238"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d5eda92f-fc42-49f4-9369-0406fd9c9097",
                            Description = "Süper Yönetici haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "d6fc7bbc-d2ea-4523-b82a-3f0130e23191",
                            Description = "Yönetici haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2dd6fd41-9cf0-4db8-9e2e-ea5359276238",
                            Description = "Kullanıcı haklarını taşıyan rol",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "77888ce9-b7b7-4bde-9805-ad518312aa58",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "0b731d5a-38d0-45e3-b63b-5e0a55fbc056",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "baransel@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Baransel",
                            Gender = 1,
                            LastName = "Bayir",
                            LockoutEnabled = false,
                            NormalizedEmail = "BARANSEL@GMAIL.COM",
                            NormalizedUserName = "BARANSEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEAXGXZB41r7sqNGD/2OCEVwxlnCYDqS7kMYvmOLH3xxclw8ggy2acqDHzMxnFtJ9/w==",
                            PhoneNumber = "05387654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12740200-48c9-436e-92c6-1c251ce72d82",
                            TwoFactorEnabled = false,
                            UserName = "baransel"
                        },
                        new
                        {
                            Id = "8ba0b330-0364-49b5-b7aa-db4362b18aef",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "b28a216b-6581-4774-a298-6ffc746b7716",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "engin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Engin Niyazi",
                            Gender = 1,
                            LastName = "Ergül",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGIN@GMAIL.COM",
                            NormalizedUserName = "ENGINNIYAZI",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXvQkEhnT9HrMzSN37m/lLh/60oo1NLRrpH7Q0HB5R6apQdAo2WOi1NWGcjzXpC8g==",
                            PhoneNumber = "05987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82ffb5eb-7e69-4530-a90f-65d4bdaa6a78",
                            TwoFactorEnabled = false,
                            UserName = "enginniyazi"
                        },
                        new
                        {
                            Id = "4e853078-b84d-4f07-86e2-651795b4a0c5",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "668aafd7-1729-4184-9053-d5f3159f2612",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lebron@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "LeBron",
                            Gender = 1,
                            LastName = "James",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEBRON@GMAIL.COM",
                            NormalizedUserName = "LEBRON",
                            PasswordHash = "AQAAAAIAAYagAAAAED3AqONFvLySHEzOTdszI6OX0PmNdnb+iwms3h2VBcZRi8sapC3SFkpttHOh3aunZQ==",
                            PhoneNumber = "05487654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "528f7a38-e034-499a-b8db-691369ac57bc",
                            TwoFactorEnabled = false,
                            UserName = "lebron"
                        },
                        new
                        {
                            Id = "c1bf39d2-2ecf-46d2-933d-e8d874021e95",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "8bc21173-b240-48eb-96ed-3cf6158b8848",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            Gender = 0,
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJFVQaUlwPwPMUxG8hgZbu3jTqJukfL6BQt1Np25l/WhJ49F9iB0nsn6oJhHsR0Z+A==",
                            PhoneNumber = "05587654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51534f2c-5111-4b06-94e4-7415a9fd2c7b",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "855d8185-6a9b-4114-a07a-c8d0932e7b94",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "6ba4b276-07de-49cf-a786-86f35670f909",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "customer",
                            Gender = 0,
                            LastName = "customer",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEB6r+O97Io/QBw+tLTKrxd5192mCBZUPfMAowNDKvmwT8M056pE2ncsIXeG8HtnxTw==",
                            PhoneNumber = "05687654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9196ff1-11f3-488a-93e8-dfaae315aeea",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        });
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.PTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("PTasks", (string)null);
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Budget")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubscriptionPlan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectRole")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.PTask", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Project", "Project")
                        .WithMany("PTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "User")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Project", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Subscription", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Project", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.TeamMember", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Project", "Project")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "User")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("Subscriptions");

                    b.Navigation("TeamMemberships");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Project", b =>
                {
                    b.Navigation("PTasks");

                    b.Navigation("Subscriptions");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
