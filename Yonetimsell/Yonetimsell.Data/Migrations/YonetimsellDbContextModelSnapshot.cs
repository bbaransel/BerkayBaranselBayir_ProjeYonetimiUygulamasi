// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yonetimsell.Data.Concrete.Contexts;

#nullable disable

namespace Yonetimsell.Data.Migrations
{
    [DbContext(typeof(YonetimsellDbContext))]
    partial class YonetimsellDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9a3b78eb-399b-4c60-993e-ebce90b222d8",
                            RoleId = "26789acb-a978-4cea-a333-2ea7c213f772"
                        },
                        new
                        {
                            UserId = "90de0a8f-7c8f-4a60-a498-273a7cee8bc0",
                            RoleId = "26789acb-a978-4cea-a333-2ea7c213f772"
                        },
                        new
                        {
                            UserId = "8ed1ff31-b434-49d0-8d2f-3a7a10742dff",
                            RoleId = "6493f1c3-3c6a-446e-aedb-353c3b18648b"
                        },
                        new
                        {
                            UserId = "6eb54970-d06d-4107-a4d3-abb13ac74200",
                            RoleId = "6493f1c3-3c6a-446e-aedb-353c3b18648b"
                        },
                        new
                        {
                            UserId = "bab69720-50cd-4568-a18e-d48a0a5f923b",
                            RoleId = "35cc1aef-0413-47b7-a7ba-cd10e2565ead"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "26789acb-a978-4cea-a333-2ea7c213f772",
                            Description = "Süper Yönetici haklarını taşıyan rol",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "6493f1c3-3c6a-446e-aedb-353c3b18648b",
                            Description = "Yönetici haklarını taşıyan rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "35cc1aef-0413-47b7-a7ba-cd10e2565ead",
                            Description = "Kullanıcı haklarını taşıyan rol",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9a3b78eb-399b-4c60-993e-ebce90b222d8",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "e12e4b38-ed48-4995-ba30-da963accaef1",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "baransel@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Baransel",
                            Gender = 1,
                            ImageUrl = "/files/images/default.png",
                            LastName = "Bayir",
                            LockoutEnabled = false,
                            NormalizedEmail = "BARANSEL@GMAIL.COM",
                            NormalizedUserName = "BARANSEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEE807vGGgSEMrown3C4u5pEE+YcRAzUZRkN6mfj8u9azSZdWiNjE/F+ofX6hUg6QqQ==",
                            PhoneNumber = "05387654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df6cc4d6-dc3d-4058-a0a7-30df7e87d7cd",
                            TwoFactorEnabled = false,
                            UserName = "baransel"
                        },
                        new
                        {
                            Id = "90de0a8f-7c8f-4a60-a498-273a7cee8bc0",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "5fbad789-117c-4273-979c-828042da8c5c",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "engin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Engin Niyazi",
                            Gender = 1,
                            ImageUrl = "/files/images/default.png",
                            LastName = "Ergül",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGIN@GMAIL.COM",
                            NormalizedUserName = "ENGINNIYAZI",
                            PasswordHash = "AQAAAAIAAYagAAAAEIwEBdQECMNpcB36lJGnhSJN4snBN1cAqGvjld47buCe42n5lNlh8SGxZBdfyMULtg==",
                            PhoneNumber = "05987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b68b7d65-de25-4edb-99be-eb2e33118293",
                            TwoFactorEnabled = false,
                            UserName = "enginniyazi"
                        },
                        new
                        {
                            Id = "8ed1ff31-b434-49d0-8d2f-3a7a10742dff",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "24a34d1f-3d13-46e6-bcfe-33ad510e9fb3",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lebron@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "LeBron",
                            Gender = 1,
                            ImageUrl = "/files/images/default.png",
                            LastName = "James",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEBRON@GMAIL.COM",
                            NormalizedUserName = "LEBRON",
                            PasswordHash = "AQAAAAIAAYagAAAAEFDdnd905BYVbQVXxPcNokvbu1KA3buNq34fYGx8wEGTRBapgP0bAPY5iVj2daVyMQ==",
                            PhoneNumber = "05487654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ffa2933c-a925-433e-a27f-84b56e51daf8",
                            TwoFactorEnabled = false,
                            UserName = "lebron"
                        },
                        new
                        {
                            Id = "6eb54970-d06d-4107-a4d3-abb13ac74200",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "8419f365-c268-4534-ad1f-4304a846d55e",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            Gender = 0,
                            ImageUrl = "/files/images/default.png",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPFlRe9THbEBhbIXkyx4qlrb4EXsdI1nHGhGktByOFaBo5i6Jb8xK1Ew4fpf7vKSrQ==",
                            PhoneNumber = "05587654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e27864fc-d31d-45a1-bb7c-f650465c40b4",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "bab69720-50cd-4568-a18e-d48a0a5f923b",
                            AccessFailedCount = 0,
                            Address = "Nokta Mah. Virgül Caddesi Ünlem Sokak no:1 daire:2",
                            City = "İstanbul",
                            ConcurrencyStamp = "82e54089-9c37-45f4-95fa-5a4f28728a51",
                            DateOfBirth = new DateTime(1998, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "customer",
                            Gender = 0,
                            ImageUrl = "/files/images/default.png",
                            LastName = "customer",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@GMAIL.COM",
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAECfDaSSPwUJzrmTMORNuR12BAsbNkxKy3jkHVWjd/VXrtiJhgoB6PUw4+c4lB0TRKw==",
                            PhoneNumber = "05687654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74197703-4280-46f2-bd79-33a89ea7799a",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        });
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RelatedId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SendingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.PTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("PTasks", (string)null);
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Budget")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("date('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubscriptionPlan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectRole")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Friendship", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId");

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Message", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId");

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.PTask", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Project", "Project")
                        .WithMany("PTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "User")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Project", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Subscription", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Project", null)
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.TeamMember", b =>
                {
                    b.HasOne("Yonetimsell.Entity.Concrete.Project", "Project")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yonetimsell.Entity.Concrete.Identity.User", "User")
                        .WithMany("TeamMemberships")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("Subscriptions");

                    b.Navigation("TeamMemberships");
                });

            modelBuilder.Entity("Yonetimsell.Entity.Concrete.Project", b =>
                {
                    b.Navigation("PTasks");

                    b.Navigation("Subscriptions");

                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
